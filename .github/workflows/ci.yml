# GitHub Actions CI/CD Pipeline for GovernmentReporter
# Runs tests, linting, type checking, and builds on every push and pull request

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual trigger

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: Lint and format check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Check code formatting with black
        run: |
          source .venv/bin/activate
          black --check src/ tests/

      - name: Check import sorting with isort
        run: |
          source .venv/bin/activate
          isort --check-only src/ tests/

      - name: Run mypy type checking
        run: |
          source .venv/bin/activate
          mypy src/ --ignore-missing-imports
        continue-on-error: true  # Don't fail build on type errors yet

  # Job 2: Run test suite
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate || . .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run tests with pytest
        run: |
          source .venv/bin/activate || . .venv/bin/activate
          pytest tests/ -v --tb=short --maxfail=5
        env:
          # Provide minimal test environment
          OPENAI_API_KEY: test-key
          COURT_LISTENER_API_TOKEN: test-token

      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: |
          source .venv/bin/activate
          pytest tests/ --cov=governmentreporter --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # Job 3: Build package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package with twine
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 7

  # Job 4: Build and test Docker image
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: governmentreporter:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm governmentreporter:test python -c "import governmentreporter; print('OK')"

  # Job 5: Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"
          pip install safety bandit

      - name: Run safety check
        run: |
          source .venv/bin/activate
          safety check --json || true
        continue-on-error: true

      - name: Run bandit security scan
        run: |
          source .venv/bin/activate
          bandit -r src/ -f json -o bandit-report.json || true
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
          retention-days: 30
        if: always()

  # Job 6: Build documentation
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Build Sphinx documentation
        run: |
          source .venv/bin/activate
          cd docs
          make html
        continue-on-error: true  # Don't fail if docs have warnings

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/
          retention-days: 7
        if: always()

  # Job 7: Notification on completion
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, test, build, docker, security, docs]
    if: always()

    steps:
      - name: Check workflow status
        run: |
          if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]; then
            echo "CI pipeline failed"
            exit 1
          else
            echo "CI pipeline passed"
          fi
